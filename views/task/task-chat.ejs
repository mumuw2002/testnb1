<head>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    .chat-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }

    .messages {
      border: 1px solid #ddd;
      padding: 10px;
      margin-bottom: 20px;
      height: 400px;
      overflow-y: scroll;
    }

    .message {
      margin-bottom: 10px;
      display: flex;
      align-items: center;
    }

    .avatar {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
    }

    .chat-form {
      display: flex;
    }

    .chat-form input {
      flex: 1;
      padding: 10px;
    }

    .chat-form button {
      padding: 10px 20px;
    }
  </style>
</head>

<body>
  <div class="contant">
    <%- include('../task/task_component/task-navbar.ejs') %>
      <div class="chat-container">
        <div class="messages" id="messages">
          <% messages.forEach((msg)=> { %>
            <div class="message">
              <img src="<%= msg.userId.profileImage %>" alt="User" class="avatar">
              <span><strong>
                  <%= msg.userId.firstName %> <%= msg.userId.lastName %>:
                </strong>
                <%= msg.message %>
              </span>
            </div>
            <% }); %>
        </div>
        <form class="chat-form" id="chatForm">
          <input type="text" id="messageInput" name="message" placeholder="Type a message..." required>
          <button type="submit">Send</button>
        </form>
      </div>
  </div>
  <script>
    const socket = io();

    // รับข้อความจากเซิร์ฟเวอร์
    socket.on('chat message', (msg) => {
      const messages = document.querySelector('.messages');
      const messageElement = document.createElement('div');
      messageElement.classList.add('message');
      messageElement.innerHTML = `
        <img src="${msg.userId.profileImage}" alt="User" class="avatar">
        <span><strong>${msg.userId.firstName} ${msg.userId.lastName}:</strong> ${msg.message}</span>
    `;
      messages.appendChild(messageElement);
      messages.scrollTop = messages.scrollHeight; // เลื่อนลงอัตโนมัติเมื่อมีข้อความใหม่
    });

    // ส่งข้อความไปยังเซิร์ฟเวอร์ผ่าน HTTP POST request
    document.querySelector('.chat-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const input = document.querySelector('input[name="message"]');
      const message = input.value;

      try {
        const response = await fetch(`/space/item/<%= spaces._id %>/chat`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        });

        if (response.ok) {
          input.value = ''; // ล้างช่อง input
        } else {
          console.error('Failed to send message');
        }
      } catch (error) {
        console.error('Error sending message:', error);
      }
    });
  </script>
</body>